<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects | gxanth.com</title>
    <link>https://gxanth.com/project/</link>
      <atom:link href="https://gxanth.com/project/index.xml" rel="self" type="application/rss+xml" />
    <description>Projects</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Â©`2022`</copyright><lastBuildDate>Wed, 27 Apr 2016 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://gxanth.com/media/icon_hu7fd3825bb98079c2d856b430d735390d_488361_512x512_fill_lanczos_center_3.png</url>
      <title>Projects</title>
      <link>https://gxanth.com/project/</link>
    </image>
    
    <item>
      <title>An embedable key-value store for fast storage devices</title>
      <link>https://gxanth.com/project/parallax/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://gxanth.com/project/parallax/</guid>
      <description>&lt;p&gt;Parallax is an LSM-based persistent key-value store designed for flash storage devices (SSDs, NVMe). Parallax reduces I/O amplification and increases CPU efficiency using the following mechanism. It categorizes key-value (KV) pairs into three size-based categories: Small, Medium, and Large. Then it applies a different policy for each category. It stores Small KV pairs inside the LSM levels (as RocksDB). It always performs key-value separation for KV pairs (as BlobDB), writing them in a value log, and it uses a garbage collection (GC) mechanism for the value log. For medium KV pairs, it uses a hybrid policy: It performs KV separation up to the semi-last levels and then stores them in place to bulk-free space without using GC.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
